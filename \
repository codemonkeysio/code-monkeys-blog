// TODO:
// Adjust frontmatter properties and values in themeConfig
// Adjust date value (already in ISO), category (topics), tags (not currently used), and image (img)
// Add this frontmatter to each page if possible
// Customize the plugin and structured data component by checking for the existence of frontmatter page{NAME} property
// Ex) pageHome: true

// Format all files

// Handle frontmatter being undefined (i.e., check conditions then set to null if it doesn't meet them)
// (some pages may not have or need all of the same frontmatter as other pages)

// What tags should be dynamically generated?
// Should all or certain tags be abstracted to a separate data file?
// File will become too big, so it's better to keep them on the page
// if they're specific to that page
// If they're are one of say a set number of values then maybe abstract
// them to a sepearate file
// If they are the same value for all pages then abstract them to
// be in the dynamic metadata
// If the tag isn't defined or isn't the corrent value then it can be
// set to null

// Abstract og and twitter tags to either theme config or leave in the config.js file and ignore the setting
// of metadata here
// Check homepage og and twitter tags
// Check Topics, All Posts, Resources, and Donate og and twitter tags
// Check 404 page og and twitter tags

// remove https from post linkImg's
// Can remive https://codemonkeys.tech/images/ from each linkImg and just check for https
// and use that link if present
// If not then add the ctx domain with /images/ + frontmatter.linkImg
// Handle Open Graph and Twitter options
// If linkImg is null then use Open Graph Image for og and Twitter Image for twitter

// Add frontmatter to paginated pages
// Check By Topic and paginated pages of and twitter tags
// Set default values to the homepage og and twitter tags

// author will default to Jay the Code Monkey, but ideally can be overridden in post frontmatter
// alt in posts can be abstracted by using the page title and appending Post Picture, need to check if img is defined (may not always want title Post Picture)
// linkImgAlt can be abstracted by using the page title and appending Image, need to check if linkImg is defined (may not always want title Image)
// sidebar can be abstracted if the page is determined to be a blog post because then it will have a sidebar

// Use built in JS or a libray like dayjs to convert the time to ISO Strings
module.exports = (options = {}, ctx) => ({
  extendPageData($page) {
    const { frontmatter, path } = $page
    console.log('frontmatter', frontmatter)
    const metadata = {
      title: frontmatter.title ? frontmatter.title : ctx.siteConfig.title,

      description: frontmatter.description,

      url:
        frontmatter.canonicalUrl && typeof frontmatter.canonicalUrl === 'string'
          ? frontmatter.canonicalUrl.startsWith('https')
            ? frontmatter.canonicalUrl
            : ctx.siteConfig.themeConfig.domain + frontmatter.canonicalUrl
          : null,

      linkImg:
        frontmatter.linkImg && typeof frontmatter.linkImg === 'string'
          ? frontmatter.linkImg.startsWith('https')
            ? frontmatter.linkImg
            : ctx.siteConfig.themeConfig.domain +
              'images/' +
              frontmatter.linkImg
          : null,

      linkImgAlt:
        frontmatter.linkImgAlt && typeof frontmatter.linkImgAlt === 'string'
          ? frontmatter.linkImgAlt
          : null
    }

    let meta_dynamicMeta = []
    if (metadata.linkImg) {
      meta_dynamicMeta = [
        // Open Graph
        // Bug with post
        { property: 'og:title', content: metadata.title },
        { property: 'og:type', content: 'website' },
        {
          property: 'og:image',
          content: metadata.linkImg
        },
        { property: 'og:image:width', content: '1200' },
        { property: 'og:image:height', content: '628' },
        { property: 'og:image:alt', content: metadata.linkImgAlt },
        { property: 'og:url', content: metadata.url },
        { property: 'og:description', content: metadata.description },
        { property: 'og:site:name', content: 'Code Monkeys' },

        // Twitter Cards
        // Bug with post
        { property: 'twitter:card', content: 'summary_large_image' },
        { property: 'twitter:title', content: metadata.title },
        { property: 'twitter:description', content: metadata.description },
        { property: 'twitter:url', content: metadata.url },
        { property: 'twitter:site', content: '@codemonkeystech' },
        {
          property: 'twitter:image',
          content: metadata.linkImg
        },
        { property: 'twitter:image:alt', content: metadata.linkImgAlt },
        { property: 'twitter:creator', content: '@codemonkeystech' }
      ]
    }

    // Remove tags with empty content values
    meta_dynamicMeta = meta_dynamicMeta.filter(
      meta => meta.content && meta.content !== ''
    )

    // Combine frontmatter
    meta_dynamicMeta = [...(frontmatter.meta || []), ...meta_dynamicMeta]

    // Set frontmatter after removing duplicate entries
    meta_dynamicMeta = getUniqueArray(meta_dynamicMeta, [
      'name',
      'content',
      'property'
    ])

    frontmatter.meta = meta_dynamicMeta
  }
})

/**
 * Removes duplicate objects from an Array of JavaScript objects
 * @param {Array} arr Array of Objects
 * @param {Array} keyProps Array of keys to determine uniqueness
 */
function getUniqueArray(arr, keyProps) {
  return Object.values(
    arr.reduce((uniqueMap, entry) => {
      const key = keyProps.map(k => entry[k]).join('|')
      if (!(key in uniqueMap)) uniqueMap[key] = entry
      return uniqueMap
    }, {})
  )
}
